# Default values for mysql.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: mysql
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: 5.6

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 3306

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Map Volume With Container
development:
  containerPort: 3306

  env:
    # MYSQL_ROOT_PASSWORD
    - name: MYSQL_ROOT_PASSWORD
      value: root

  volumeMounts:
    # It mount from container. It map with persistentVolume localPath
    - name: mysql-persistent-storage
      mountPath: /var/lib/mysql

  volumes:
    # mongodb volume, we need storageclass, pv, pvc first
    - name: mysql-persistent-storage
      # use PersistentVolumeClaim name. Install helm folder in server first to get claimName.
      persistentVolumeClaim:
        claimName: mysql-pvc
    # env
    - name: mysql-secret-enviroment
      secret:
        secretName: mysql-secret

persistentVolume:
  create: true
  localPath: "/home/nguyentuangiang/Storages/mysql"
  capacityStorage: 10Gi
  matchExpressions:
    values:
      - nguyentuangiang

persistentVolumeClaim:
  create: true
  name: mysql-pvc

# StorageClass
storageClass:
  create: true
  allowVolumeExpansion: true
